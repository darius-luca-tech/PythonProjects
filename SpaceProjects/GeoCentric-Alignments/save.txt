timp = datetime.datetime.utcnow() 
print(timp) 
d = timp_pamant(timp.year, timp.month, timp.day, timp.hour) 

def dict_planete(nume, d):

	if nume == "Soare": 
		return { 
			'N': math.radians(0.0),#N - longitudinea nodului ascendent
			'i': math.radians(0.0),#i - Înclinarea către ecliptică (planul orbitei Pământului)
			'w': math.radians(282.9404 + 4.70935E-5 * d),#w - argumentul periheliu
			'a': 1.000000, #a - semi-majore axă, sau distanța medie de la soare
			'e': 0.016709 - 1.151E-9 * d, #e - excentricitate (0 = cerc, 0-1 = elipsă, 1 = parabola)
			'M': math.radians(356.0470 + 0.9856002585 * d) #M - anomalie normala
		} 

	elif nume == 'Mercur': 
		return { 
			'N': math.radians(48.3313 + 3.24587E-5 * d),
			'i': math.radians(7.0047 + 5.00E-8 * d),
			'w': math.radians(29.1241 + 1.0144E-5 * d), 
			'a': 0.387098, 
			'e': 0.205635 + 5.59E-10 * d, 
			'M': math.radians(168.6562 + 4.0923344368 * d) 
		} 
	elif nume == 'Venus': 
		return { 
			'N': math.radians(76.6799 + 2.46590E-4 * d),  
			'i': math.radians(3.3946 + 2.75E-8 * d), 
			'w': math.radians(54.8910 + 1.38374E-5 * d), 
			'a': 0.723330, 
			'e': 0.006773 - 1.302E-9 * d, 
			'M': math.radians(48.0052 + 1.602130224 * d) 
		} 
	elif nume == 'Marte': 
		return { 
			'N': math.radians(49.5574 + 2.11081E-5 * d), 
			'i': math.radians(1.8497 - 1.78E-8 * d), 
			'w': math.radians(2856.5016 + 2.92961E-5 * d), 
			'a': 1.523688, 
			'e': 0.093405 + 2.516E-9 * d, 
			'M': math.radians(18.6021 + 0.5240207766 * d)
		} 
	elif nume == 'Jupiter': 
		return { 
			'N': math.radians(113.6634 + 2.38980E-5 * d), 
			'i': math.radians(2.4886 - 1.081E-7 * d), 
			'w': math.radians(339.3939 + 2.97661E-5 * d), 
			'a': 9.55475, 
			'e': 0.055546 - 9.499E-9 * d, 
			'M': math.radians(316.9670 + 0.03344422282 * d) 
		} 

	elif nume == 'Uranus': 
		return { 
			'N': math.radians(74.0005 + 1.3978E-5 * d), 
			'i': math.radians(0.7733 + 1.9E-8 * d), 
			'w': math.radians(96.6612 + 3.0565E-5 * d), 
			'a': 19.18171 - 1.55E-8 * d, 
			'e': 0.047318 + 7.45E-9 * d, 
			'M': math.radians(1142.5905 + 0.011725806 * d)
		} 
	elif nume == 'Neptun': 
		return { 
			'N': math.radians(131.7806 + 3.0173E-5 * d), 
			'i': math.radians(1.7700 - 2.55E-7 * d),
			'w': math.radians(272.8461 - 6.027E-6 * d),
			'a': 30.05826 + 3.313E-8 * d, 
			'e': 0.008606 + 2.15E-9 * d, 
			'M': math.radians(260.2471 + 0.005995147 * d)   
		}  
	print(56)
print(3)
def elemente_orbitale(nume_planeta, d): 
	planeta = dict_planete(nume_planeta, d) 
	N = planeta.get('N') 
	print(N)
	i = planeta.get('i') 
	w = planeta.get('w') 
	a = planeta.get('a') 
	e = planeta.get('e') 
	M = planeta.get('M') 

	E = M + e * math.sin(M) * (1.0 + e * math.cos(M)) #anomalia excentrică E din anomalia medie M și din excentricitatea e (E și M în radianii) 
	
	xv = a * (math.cos(E) - e) 						#}Distanța de la soare și adevărata sa anomalie v
	yv = a * (math.sqrt(1.0 - e * e) * math.sin(E)) #}

	v = math.atan2(yv, xv) 
	r = math.sqrt(xv * xv + yv * yv) 

	xh = r * (math.cos(N) * math.cos(v +  w) - math.sin(N) * math.sin(v + w) * math.cos(i)) #Pozitia planetelor in spatiul cu 3 dimensiuni
	yh = r * (math.sin(N) * math.cos(v + w) + math.cos(N) * math.sin(v + w) * math.cos(i)) 
	zh = r * (math.sin(v + w) * math.sin(i)) 

	lonecl = math.atan2(yh, xh)	#longitudinea ecliptică și latitudinea eliptica
	latecl = math.atan2(zh, math.sqrt(xh * xh + yh * yh))  

	return { 
		'r':r, 
		'v':v, 
		'xh': xh, 
		'yh': yh, 
		'w': w, 
		'lonecl': lonecl, 
		'latecl': latecl
	} 
